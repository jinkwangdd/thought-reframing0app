name: iOS Build and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
      
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      TEAM_ID: ${{ secrets.TEAM_ID }}
      CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.0
        bundler-cache: true
        working-directory: thoughtsreframer

    - name: Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: thoughtsreframer/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: Install certificates and provisioning profiles
      env:
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        MOBILEPROVISION: ${{ secrets.MOBILEPROVISION }}
      run: |
        # Create keychain
        security create-keychain -p "temppass" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "temppass" build.keychain
        security set-keychain-settings -t 3600 -l build.keychain
        
        # Install certificate
        echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/xcodebuild -T /usr/bin/xcrun
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "temppass" build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$MOBILEPROVISION" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        
        # Extract provisioning profile UUID with better error handling
        echo "üîç Extracting provisioning profile information..."
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision > /tmp/profile.plist
        
        # Try different methods to extract UUID
        PROFILE_UUID=""
        if command -v plutil >/dev/null 2>&1; then
          PROFILE_UUID=$(plutil -extract UUID raw /tmp/profile.plist 2>/dev/null || echo "")
        fi
        
        if [ -z "$PROFILE_UUID" ]; then
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /tmp/profile.plist 2>/dev/null || echo "")
        fi
        
        if [ -z "$PROFILE_UUID" ]; then
          # Fallback: extract from filename or generate
          PROFILE_UUID=$(grep -A1 "<key>UUID</key>" /tmp/profile.plist | grep "<string>" | sed 's/.*<string>\(.*\)<\/string>.*/\1/' || echo "")
        fi
        
        if [ -z "$PROFILE_UUID" ]; then
          echo "‚ùå Failed to extract provisioning profile UUID"
          echo "üìÑ Profile content:"
          cat /tmp/profile.plist | head -20
          exit 1
        fi
        
        echo "PROVISIONING_PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
        echo "‚úÖ Provisioning Profile UUID: $PROFILE_UUID"
        
        # List all available identities for debugging
        echo "üìã Available signing identities:"
        security find-identity -v -p codesigning
        
        # Detect and set certificate name with validation
        CERT_NAME=$(security find-identity -v -p codesigning | grep "Apple Distribution\|iOS Distribution" | head -n 1 | cut -d '"' -f 2)
        
        if [ -z "$CERT_NAME" ]; then
          echo "‚ö†Ô∏è  No Distribution certificate found, checking for Development certificates..."
          CERT_NAME=$(security find-identity -v -p codesigning | grep "Apple Development\|iOS Development" | head -n 1 | cut -d '"' -f 2)
          
          if [ -n "$CERT_NAME" ]; then
            echo "‚ö†Ô∏è  Warning: Using Development certificate for App Store build. This may cause issues."
            echo "üí° Please ensure you have uploaded the correct Apple Distribution certificate."
          fi
        fi
        
        if [ -z "$CERT_NAME" ]; then
          echo "‚ùå No valid signing certificate found!"
          echo "üìã Available certificates:"
          security find-identity -v -p codesigning
          exit 1
        fi
        
        echo "CODE_SIGN_IDENTITY=$CERT_NAME" >> $GITHUB_ENV
        echo "üîë Using certificate: $CERT_NAME"
        
        # Validate certificate type
        if echo "$CERT_NAME" | grep -q "Development"; then
          echo "‚ö†Ô∏è  WARNING: Using Development certificate for App Store deployment!"
          echo "üí° This build may fail during export. Please use Apple Distribution certificate."
        fi

    - name: Install dependencies
      working-directory: thoughtsreframer
      run: |
        gem install bundler
        bundle install
        pod install --repo-update

    - name: Build and Deploy
      working-directory: thoughtsreframer
      run: |
        echo "üöÄ Building iOS app..."
        bundle exec fastlane beta_auto

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: thoughtsreframer/*.ipa
        retention-days: 30

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          ~/Library/Logs/gym/
          thoughtsreframer/fastlane/report.xml
        retention-days: 7 